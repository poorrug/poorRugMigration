{"ast":null,"code":"const ADD_TRANSACTION = 'ADD_TRANSACTION';\nconst RECEIVE_TX_RECEIPT = 'RECEIVE_TX_RECEIPT';\nconst SET_TRANSACTIONS = 'SET_TRANSACTIONS';\nexport const addTransaction = transaction => ({\n  type: ADD_TRANSACTION,\n  transaction\n});\nexport const receiveTxReceipt = (txHash, receipt) => ({\n  type: RECEIVE_TX_RECEIPT,\n  txHash,\n  receipt\n});\nexport const setTransactions = transactions => ({\n  type: SET_TRANSACTIONS,\n  transactions\n});\nexport const initialState = {\n  initialized: false,\n  transactions: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return { ...state,\n        transactions: { ...state.transactions,\n          [action.transaction.hash]: action.transaction\n        }\n      };\n\n    case RECEIVE_TX_RECEIPT:\n      return { ...state,\n        transactions: { ...state.transactions,\n          [action.txHash]: { ...state.transactions[action.txHash],\n            receipt: action.receipt\n          }\n        }\n      };\n\n    case SET_TRANSACTIONS:\n      return { ...state,\n        transactions: action.transactions,\n        initialized: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/contexts/Transactions/reducer.ts"],"names":["ADD_TRANSACTION","RECEIVE_TX_RECEIPT","SET_TRANSACTIONS","addTransaction","transaction","type","receiveTxReceipt","txHash","receipt","setTransactions","transactions","initialState","initialized","reducer","state","action","hash"],"mappings":"AAGA,MAAMA,eAAe,GAAG,iBAAxB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAyBA,OAAO,MAAMC,cAAc,GAAIC,WAAD,KAAqD;AACjFC,EAAAA,IAAI,EAAEL,eAD2E;AAEjFI,EAAAA;AAFiF,CAArD,CAAvB;AAKP,OAAO,MAAME,gBAAgB,GAAG,CAACC,MAAD,EAAiBC,OAAjB,MAA0E;AACxGH,EAAAA,IAAI,EAAEJ,kBADkG;AAExGM,EAAAA,MAFwG;AAGxGC,EAAAA;AAHwG,CAA1E,CAAzB;AAMP,OAAO,MAAMC,eAAe,GAAIC,YAAD,KAA2D;AACxFL,EAAAA,IAAI,EAAEH,gBADkF;AAExFQ,EAAAA;AAFwF,CAA3D,CAAxB;AAKP,OAAO,MAAMC,YAA+B,GAAG;AAC7CC,EAAAA,WAAW,EAAE,KADgC;AAE7CF,EAAAA,YAAY,EAAE;AAF+B,CAAxC;;AAKP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAA2BC,MAA3B,KAA8E;AAC5F,UAAQA,MAAM,CAACV,IAAf;AACE,SAAKL,eAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELJ,QAAAA,YAAY,EAAE,EACZ,GAAGI,KAAK,CAACJ,YADG;AAEZ,WAACK,MAAM,CAACX,WAAP,CAAmBY,IAApB,GAA2BD,MAAM,CAACX;AAFtB;AAFT,OAAP;;AAOF,SAAKH,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELJ,QAAAA,YAAY,EAAE,EACZ,GAAGI,KAAK,CAACJ,YADG;AAEZ,WAACK,MAAM,CAACR,MAAR,GAAiB,EACf,GAAGO,KAAK,CAACJ,YAAN,CAAmBK,MAAM,CAACR,MAA1B,CADY;AAEfC,YAAAA,OAAO,EAAEO,MAAM,CAACP;AAFD;AAFL;AAFT,OAAP;;AAUF,SAAKN,gBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELJ,QAAAA,YAAY,EAAEK,MAAM,CAACL,YAFhB;AAGLE,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAKF;AACE,aAAOE,KAAP;AA3BJ;AA6BD,CA9BD;;AAgCA,eAAeD,OAAf","sourcesContent":["import { TransactionReceipt } from 'web3-core'\nimport { Transaction, TransactionsMap } from './types'\n\nconst ADD_TRANSACTION = 'ADD_TRANSACTION'\nconst RECEIVE_TX_RECEIPT = 'RECEIVE_TX_RECEIPT'\nconst SET_TRANSACTIONS = 'SET_TRANSACTIONS'\n\ninterface AddTransactionAction {\n  type: typeof ADD_TRANSACTION,\n  transaction: Transaction\n}\n\ninterface ReceiveTxReceiptAction {\n  type: typeof RECEIVE_TX_RECEIPT,\n  txHash: string,\n  receipt: TransactionReceipt\n}\n\ninterface SetTransactionsAction {\n  type: typeof SET_TRANSACTIONS,\n  transactions: TransactionsMap\n}\n\ntype TransactionsActions = AddTransactionAction | ReceiveTxReceiptAction | SetTransactionsAction\n\nexport interface TransactionsState {\n  initialized: boolean,\n  transactions: TransactionsMap\n}\n\nexport const addTransaction = (transaction: Transaction): AddTransactionAction => ({\n  type: ADD_TRANSACTION,\n  transaction,\n})\n\nexport const receiveTxReceipt = (txHash: string, receipt: TransactionReceipt): ReceiveTxReceiptAction => ({\n  type: RECEIVE_TX_RECEIPT,\n  txHash,\n  receipt,\n})\n\nexport const setTransactions = (transactions: TransactionsMap): SetTransactionsAction => ({\n  type: SET_TRANSACTIONS,\n  transactions,\n})\n\nexport const initialState: TransactionsState = {\n  initialized: false,\n  transactions: {}\n}\n\nconst reducer = (state: TransactionsState, action: TransactionsActions): TransactionsState => {\n  switch (action.type) {\n    case ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: {\n          ...state.transactions,\n          [action.transaction.hash]: action.transaction,\n        }\n      }\n    case RECEIVE_TX_RECEIPT:\n      return {\n        ...state,\n        transactions: {\n          ...state.transactions,\n          [action.txHash]: {\n            ...state.transactions[action.txHash],\n            receipt: action.receipt,\n          }\n        }\n      }\n    case SET_TRANSACTIONS:\n      return {\n        ...state,\n        transactions: action.transactions,\n        initialized: true,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}