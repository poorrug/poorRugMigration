{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { Account } from './lib/accounts.js';\nimport { EVM } from \"./lib/evm.js\";\nconst oneEther = 1000000000000000000;\nexport class Yam {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes(\"wss\")) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.accounts = [];\n    this.markets = [];\n    this.prices = {};\n    this.allocations = {};\n    this.rates = {};\n    this.aprs = {};\n    this.poolWeis = {};\n    this.platformInfo = {};\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot);\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number));\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account;\n    this.contracts.setDefaultAccount(account);\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount;\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);\n\n    if (!newAccount || account.address && account.address.toLowerCase() !== newAccount.address.toLowerCase()) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${newAccount ? newAccount.address : null}`);\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/yam/Yam.js"],"names":["Web3","BigNumber","Contracts","Account","EVM","oneEther","Yam","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","accounts","markets","prices","allocations","rates","aprs","poolWeis","platformInfo","resetEVM","addAccount","address","number","push","setProvider","operation","setNetworkId","setDefaultAccount","account","getDefaultAccount","loadAccount","newAccount","wallet","add","privateKey","toLowerCase","Error","toBigN","a"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport BigNumber from 'bignumber.js'\nimport {\n  Contracts\n} from './lib/contracts.js';\nimport {\n  Account\n} from './lib/accounts.js';\nimport {\n  EVM\n} from \"./lib/evm.js\";\n\nconst oneEther = 1000000000000000000;\n\nexport class Yam {\n  constructor(\n    provider,\n    networkId,\n    testing,\n    options\n  ) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes(\"wss\")) {\n        realProvider = new Web3.providers.WebsocketProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        );\n      } else {\n        realProvider = new Web3.providers.HttpProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        );\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot()\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.accounts = [];\n    this.markets = [];\n    this.prices = {};\n    this.allocations = {};\n    this.rates = {};\n    this.aprs = {};\n    this.poolWeis = {};\n    this.platformInfo = {};\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot);\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number));\n  }\n\n  setProvider(\n    provider,\n    networkId\n  ) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  setDefaultAccount(\n    account\n  ) {\n    this.web3.eth.defaultAccount = account;\n    this.contracts.setDefaultAccount(account);\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount;\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(\n      account.privateKey,\n    );\n\n    if (\n      !newAccount ||\n      (\n        account.address &&\n        account.address.toLowerCase() !== newAccount.address.toLowerCase()\n      )\n    ) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${newAccount ? newAccount.address : null}`);\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}