{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport Web3 from 'web3';\nimport * as Types from \"./types.js\";\nimport { SUBTRACT_GAS_LIMIT, addressMap } from './constants.js';\nimport ERC20Json from '../clean_build/contracts/IERC20.json';\nimport YAMv2Json from '../clean_build/contracts/YAMv2.json';\nimport YAMv2MigrationJson from '../clean_build/contracts/YAMv2Migration.json';\nimport YAMJson from '../clean_build/contracts/YAMDelegator.json';\nimport YAMRebaserJson from '../clean_build/contracts/YAMRebaser.json';\nimport YAMReservesJson from '../clean_build/contracts/YAMReserves.json';\nimport YAMGovJson from '../clean_build/contracts/GovernorAlpha.json';\nimport YAMTimelockJson from '../clean_build/contracts/Timelock.json';\nimport WETHJson from './weth.json';\nimport SNXJson from './snx.json';\nimport UNIFactJson from './unifact2.json';\nimport UNIPairJson from './uni2.json';\nimport UNIRouterJson from './uniR.json';\nimport WETHPoolJson from '../clean_build/contracts/YAMETHPool.json';\nimport AMPLPoolJson from '../clean_build/contracts/YAMAMPLPool.json';\nimport YFIPoolJson from '../clean_build/contracts/YAMYFIPool.json';\nimport MKRPoolJson from '../clean_build/contracts/YAMMKRPool.json';\nimport LENDPoolJson from '../clean_build/contracts/YAMLENDPool.json';\nimport COMPPoolJson from '../clean_build/contracts/YAMCOMPPool.json';\nimport SNXPoolJson from '../clean_build/contracts/YAMSNXPool.json';\nimport LINKPoolJson from '../clean_build/contracts/YAMLINKPool.json';\nimport IncJson from '../clean_build/contracts/YAMIncentivizer.json';\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.uni_pair = new this.web3.eth.Contract(UNIPairJson);\n    this.uni_router = new this.web3.eth.Contract(UNIRouterJson);\n    this.uni_fact = new this.web3.eth.Contract(UNIFactJson);\n    this.yfi = new this.web3.eth.Contract(ERC20Json.abi);\n    this.UNIAmpl = new this.web3.eth.Contract(ERC20Json.abi);\n    this.ycrv = new this.web3.eth.Contract(ERC20Json.abi);\n    this.yam = new this.web3.eth.Contract(YAMJson.abi);\n    this.yfi_pool = new this.web3.eth.Contract(YFIPoolJson.abi);\n    this.eth_pool = new this.web3.eth.Contract(WETHPoolJson.abi);\n    this.ampl_pool = new this.web3.eth.Contract(AMPLPoolJson.abi);\n    this.ycrv_pool = new this.web3.eth.Contract(IncJson.abi);\n    this.comp_pool = new this.web3.eth.Contract(COMPPoolJson.abi);\n    this.link_pool = new this.web3.eth.Contract(LINKPoolJson.abi);\n    this.lend_pool = new this.web3.eth.Contract(LENDPoolJson.abi);\n    this.snx_pool = new this.web3.eth.Contract(SNXPoolJson.abi);\n    this.mkr_pool = new this.web3.eth.Contract(MKRPoolJson.abi);\n    this.comp = new this.web3.eth.Contract(ERC20Json.abi);\n    this.link = new this.web3.eth.Contract(ERC20Json.abi);\n    this.lend = new this.web3.eth.Contract(ERC20Json.abi);\n    this.snx = new this.web3.eth.Contract(ERC20Json.abi);\n    this.mkr = new this.web3.eth.Contract(ERC20Json.abi);\n    this.yam_ycrv_uni_lp = new this.web3.eth.Contract(ERC20Json.abi);\n    this.erc20 = new this.web3.eth.Contract(ERC20Json.abi);\n    this.pool = new this.web3.eth.Contract(LENDPoolJson.abi);\n    this.yamV2 = new this.web3.eth.Contract(YAMv2Json.abi);\n    this.yamV2migration = new this.web3.eth.Contract(YAMv2MigrationJson.abi);\n    this.rebaser = new this.web3.eth.Contract(YAMRebaserJson.abi);\n    this.reserves = new this.web3.eth.Contract(YAMReservesJson.abi);\n    this.gov = new this.web3.eth.Contract(YAMGovJson.abi);\n    this.timelock = new this.web3.eth.Contract(YAMTimelockJson.abi);\n    this.weth = new this.web3.eth.Contract(WETHJson);\n    this.setProvider(provider, networkId);\n    this.setDefaultAccount(this.web3.eth.defaultAccount);\n  }\n\n  setProvider(provider, networkId) {\n    this.yam.setProvider(provider);\n    this.rebaser.setProvider(provider);\n    this.reserves.setProvider(provider);\n    this.gov.setProvider(provider);\n    this.timelock.setProvider(provider);\n    const contracts = [{\n      contract: this.yam,\n      json: YAMJson\n    }, {\n      contract: this.rebaser,\n      json: YAMRebaserJson\n    }, {\n      contract: this.reserves,\n      json: YAMReservesJson\n    }, {\n      contract: this.gov,\n      json: YAMGovJson\n    }, {\n      contract: this.timelock,\n      json: YAMTimelockJson\n    }, {\n      contract: this.ycrv_pool,\n      json: IncJson\n    }, {\n      contract: this.eth_pool,\n      json: WETHPoolJson\n    }, {\n      contract: this.yfi_pool,\n      json: YFIPoolJson\n    }, {\n      contract: this.ampl_pool,\n      json: AMPLPoolJson\n    }, {\n      contract: this.snx_pool,\n      json: SNXPoolJson\n    }, {\n      contract: this.mkr_pool,\n      json: MKRPoolJson\n    }, {\n      contract: this.lend_pool,\n      json: LENDPoolJson\n    }, {\n      contract: this.link_pool,\n      json: LINKPoolJson\n    }, {\n      contract: this.comp_pool,\n      json: COMPPoolJson\n    }, {\n      contract: this.yamV2,\n      json: YAMv2Json\n    }, {\n      contract: this.yamV2migration,\n      json: YAMv2MigrationJson\n    }];\n    contracts.forEach(contract => this.setContractProvider(contract.contract, contract.json, provider, networkId));\n    this.yfi.options.address = addressMap[\"YFI\"];\n    this.ycrv.options.address = addressMap[\"YCRV\"];\n    this.weth.options.address = addressMap[\"WETH\"];\n    this.snx.options.address = addressMap[\"SNX\"];\n    this.comp.options.address = addressMap[\"COMP\"];\n    this.link.options.address = addressMap[\"LINK\"];\n    this.lend.options.address = addressMap[\"LEND\"];\n    this.mkr.options.address = addressMap[\"MKR\"];\n    this.UNIAmpl.options.address = addressMap[\"UNIAmpl\"];\n    this.uni_fact.options.address = addressMap[\"uniswapFactoryV2\"];\n    this.uni_router.options.address = addressMap[\"UNIRouter\"];\n    this.yam_ycrv_uni_lp.options.address = addressMap[\"YAMYCRV\"];\n    this.pools = [{\n      \"tokenAddr\": this.yfi.options.address,\n      \"poolAddr\": this.yfi_pool.options.address\n    }, {\n      \"tokenAddr\": this.snx.options.address,\n      \"poolAddr\": this.snx_pool.options.address\n    }, {\n      \"tokenAddr\": this.weth.options.address,\n      \"poolAddr\": this.eth_pool.options.address\n    }, {\n      \"tokenAddr\": this.comp.options.address,\n      \"poolAddr\": this.comp_pool.options.address\n    }, {\n      \"tokenAddr\": this.link.options.address,\n      \"poolAddr\": this.link_pool.options.address\n    }, {\n      \"tokenAddr\": this.lend.options.address,\n      \"poolAddr\": this.lend_pool.options.address\n    }, {\n      \"tokenAddr\": this.mkr.options.address,\n      \"poolAddr\": this.mkr_pool.options.address\n    }, {\n      \"tokenAddr\": this.UNIAmpl.options.address,\n      \"poolAddr\": this.ampl_pool.options.address\n    }];\n  }\n\n  setDefaultAccount(account) {\n    this.yfi.options.from = account;\n    this.ycrv.options.from = account;\n    this.yam.options.from = account;\n    this.weth.options.from = account;\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log(\"estimating gas\");\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const {\n            from,\n            value\n          } = options;\n          const to = method._parent._address;\n          error.transactionData = {\n            from,\n            value,\n            data,\n            to\n          };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return {\n          gasEstimate,\n          g\n        };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2\n    };\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        promi.on('transactionHash', txHash => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED;\n            resolve(txHash);\n\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi;\n              anyPromi.off();\n            }\n          }\n        });\n      });\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n            confirmationOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        const desiredConf = confirmations || this.defaultConfirmations;\n\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED;\n                resolve(receipt);\n                const anyPromi = promi;\n                anyPromi.off();\n              }\n            }\n          });\n        } else {\n          promi.on('receipt', receipt => {\n            confirmationOutcome = OUTCOMES.RESOLVED;\n            resolve(receipt);\n            const anyPromi = promi;\n            anyPromi.off();\n          });\n        }\n      });\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n\n      if (this.notifier) {\n        this.notifier.hash(transactionHash);\n      }\n\n      return {\n        transactionHash\n      };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n\n    if (this.notifier) {\n      this.notifier.hash(transactionHash);\n    }\n\n    return {\n      transactionHash,\n      confirmation: confirmationPromise\n    };\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method;\n    const {\n      blockNumber,\n      ...txOptions\n    } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n  setContractProvider(contract, contractJson, provider, networkId) {\n    contract.setProvider(provider);\n\n    try {\n      contract.options.address = contractJson.networks[networkId] && contractJson.networks[networkId].address;\n    } catch (error) {// console.log(error)\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/yam/lib/contracts.js"],"names":["BigNumber","Web3","Types","SUBTRACT_GAS_LIMIT","addressMap","ERC20Json","YAMv2Json","YAMv2MigrationJson","YAMJson","YAMRebaserJson","YAMReservesJson","YAMGovJson","YAMTimelockJson","WETHJson","SNXJson","UNIFactJson","UNIPairJson","UNIRouterJson","WETHPoolJson","AMPLPoolJson","YFIPoolJson","MKRPoolJson","LENDPoolJson","COMPPoolJson","SNXPoolJson","LINKPoolJson","IncJson","Contracts","constructor","provider","networkId","web3","options","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","uni_pair","eth","Contract","uni_router","uni_fact","yfi","abi","UNIAmpl","ycrv","yam","yfi_pool","eth_pool","ampl_pool","ycrv_pool","comp_pool","link_pool","lend_pool","snx_pool","mkr_pool","comp","link","lend","snx","mkr","yam_ycrv_uni_lp","erc20","pool","yamV2","yamV2migration","rebaser","reserves","gov","timelock","weth","setProvider","setDefaultAccount","defaultAccount","contracts","contract","json","forEach","setContractProvider","address","pools","account","from","callContractFunction","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","gasEstimate","console","log","estimateGas","error","data","encodeABI","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","undefined","Object","values","includes","Error","hashPromise","confirmationPromise","Hash","Both","Promise","resolve","reject","on","anyPromi","off","txHash","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","callConstantContractFunction","m2","blockNumber","call","block","getBlock","gasLimit","contractJson","networks"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\nimport Web3 from 'web3';\nimport * as Types from \"./types.js\";\nimport { SUBTRACT_GAS_LIMIT, addressMap } from './constants.js';\n\nimport ERC20Json from '../clean_build/contracts/IERC20.json';\nimport YAMv2Json from '../clean_build/contracts/YAMv2.json';\nimport YAMv2MigrationJson from '../clean_build/contracts/YAMv2Migration.json';\nimport YAMJson from '../clean_build/contracts/YAMDelegator.json';\nimport YAMRebaserJson from '../clean_build/contracts/YAMRebaser.json';\nimport YAMReservesJson from '../clean_build/contracts/YAMReserves.json';\nimport YAMGovJson from '../clean_build/contracts/GovernorAlpha.json';\nimport YAMTimelockJson from '../clean_build/contracts/Timelock.json';\nimport WETHJson from './weth.json';\nimport SNXJson from './snx.json';\nimport UNIFactJson from './unifact2.json';\nimport UNIPairJson from './uni2.json';\nimport UNIRouterJson from './uniR.json';\n\nimport WETHPoolJson from '../clean_build/contracts/YAMETHPool.json';\nimport AMPLPoolJson from '../clean_build/contracts/YAMAMPLPool.json';\nimport YFIPoolJson from '../clean_build/contracts/YAMYFIPool.json';\n\nimport MKRPoolJson from '../clean_build/contracts/YAMMKRPool.json';\nimport LENDPoolJson from '../clean_build/contracts/YAMLENDPool.json';\nimport COMPPoolJson from '../clean_build/contracts/YAMCOMPPool.json';\nimport SNXPoolJson from '../clean_build/contracts/YAMSNXPool.json';\nimport LINKPoolJson from '../clean_build/contracts/YAMLINKPool.json';\n\nimport IncJson from '../clean_build/contracts/YAMIncentivizer.json';\n\nexport class Contracts {\n  constructor(\n    provider,\n    networkId,\n    web3,\n    options\n  ) {\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n\n    this.uni_pair = new this.web3.eth.Contract(UNIPairJson);\n    this.uni_router = new this.web3.eth.Contract(UNIRouterJson);\n    this.uni_fact = new this.web3.eth.Contract(UNIFactJson);\n    this.yfi = new this.web3.eth.Contract(ERC20Json.abi);\n    this.UNIAmpl = new this.web3.eth.Contract(ERC20Json.abi);\n    this.ycrv = new this.web3.eth.Contract(ERC20Json.abi);\n    this.yam = new this.web3.eth.Contract(YAMJson.abi);\n\n    this.yfi_pool = new this.web3.eth.Contract(YFIPoolJson.abi);\n    this.eth_pool = new this.web3.eth.Contract(WETHPoolJson.abi);\n    this.ampl_pool = new this.web3.eth.Contract(AMPLPoolJson.abi);\n    this.ycrv_pool = new this.web3.eth.Contract(IncJson.abi);\n\n    this.comp_pool = new this.web3.eth.Contract(COMPPoolJson.abi);\n    this.link_pool = new this.web3.eth.Contract(LINKPoolJson.abi);\n    this.lend_pool = new this.web3.eth.Contract(LENDPoolJson.abi);\n    this.snx_pool = new this.web3.eth.Contract(SNXPoolJson.abi);\n    this.mkr_pool = new this.web3.eth.Contract(MKRPoolJson.abi);\n\n    this.comp = new this.web3.eth.Contract(ERC20Json.abi);\n    this.link = new this.web3.eth.Contract(ERC20Json.abi);\n    this.lend = new this.web3.eth.Contract(ERC20Json.abi);\n    this.snx = new this.web3.eth.Contract(ERC20Json.abi);\n    this.mkr = new this.web3.eth.Contract(ERC20Json.abi);\n    this.yam_ycrv_uni_lp = new this.web3.eth.Contract(ERC20Json.abi);\n\n    this.erc20 = new this.web3.eth.Contract(ERC20Json.abi);\n    this.pool = new this.web3.eth.Contract(LENDPoolJson.abi);\n\n\n    this.yamV2 = new this.web3.eth.Contract(YAMv2Json.abi);\n    this.yamV2migration = new this.web3.eth.Contract(YAMv2MigrationJson.abi);\n\n    this.rebaser = new this.web3.eth.Contract(YAMRebaserJson.abi);\n    this.reserves = new this.web3.eth.Contract(YAMReservesJson.abi);\n    this.gov = new this.web3.eth.Contract(YAMGovJson.abi);\n    this.timelock = new this.web3.eth.Contract(YAMTimelockJson.abi);\n    this.weth = new this.web3.eth.Contract(WETHJson);\n    this.setProvider(provider, networkId);\n    this.setDefaultAccount(this.web3.eth.defaultAccount);\n  }\n\n\n  setProvider(\n    provider,\n    networkId\n  ) {\n    this.yam.setProvider(provider);\n    this.rebaser.setProvider(provider);\n    this.reserves.setProvider(provider);\n    this.gov.setProvider(provider);\n    this.timelock.setProvider(provider);\n    const contracts = [\n      { contract: this.yam, json: YAMJson },\n      { contract: this.rebaser, json: YAMRebaserJson },\n      { contract: this.reserves, json: YAMReservesJson },\n      { contract: this.gov, json: YAMGovJson },\n      { contract: this.timelock, json: YAMTimelockJson },\n      { contract: this.ycrv_pool, json: IncJson },\n      { contract: this.eth_pool, json: WETHPoolJson },\n      { contract: this.yfi_pool, json: YFIPoolJson },\n      { contract: this.ampl_pool, json: AMPLPoolJson },\n      { contract: this.snx_pool, json: SNXPoolJson },\n      { contract: this.mkr_pool, json: MKRPoolJson },\n      { contract: this.lend_pool, json: LENDPoolJson },\n      { contract: this.link_pool, json: LINKPoolJson },\n      { contract: this.comp_pool, json: COMPPoolJson },\n      { contract: this.yamV2, json: YAMv2Json },\n      { contract: this.yamV2migration, json: YAMv2MigrationJson },\n    ]\n\n    contracts.forEach(contract => this.setContractProvider(\n        contract.contract,\n        contract.json,\n        provider,\n        networkId,\n      ),\n    );\n    this.yfi.options.address = addressMap[\"YFI\"];\n    this.ycrv.options.address = addressMap[\"YCRV\"];\n    this.weth.options.address = addressMap[\"WETH\"];\n    this.snx.options.address = addressMap[\"SNX\"];\n    this.comp.options.address = addressMap[\"COMP\"];\n    this.link.options.address = addressMap[\"LINK\"];\n    this.lend.options.address = addressMap[\"LEND\"];\n    this.mkr.options.address = addressMap[\"MKR\"];\n    this.UNIAmpl.options.address = addressMap[\"UNIAmpl\"];\n    this.uni_fact.options.address = addressMap[\"uniswapFactoryV2\"];\n    this.uni_router.options.address = addressMap[\"UNIRouter\"];\n    this.yam_ycrv_uni_lp.options.address = addressMap[\"YAMYCRV\"];\n\n    this.pools = [\n      {\"tokenAddr\": this.yfi.options.address, \"poolAddr\": this.yfi_pool.options.address},\n      {\"tokenAddr\": this.snx.options.address, \"poolAddr\": this.snx_pool.options.address},\n      {\"tokenAddr\": this.weth.options.address, \"poolAddr\": this.eth_pool.options.address},\n      {\"tokenAddr\": this.comp.options.address, \"poolAddr\": this.comp_pool.options.address},\n      {\"tokenAddr\": this.link.options.address, \"poolAddr\": this.link_pool.options.address},\n      {\"tokenAddr\": this.lend.options.address, \"poolAddr\": this.lend_pool.options.address},\n      {\"tokenAddr\": this.mkr.options.address, \"poolAddr\": this.mkr_pool.options.address},\n      {\"tokenAddr\": this.UNIAmpl.options.address, \"poolAddr\": this.ampl_pool.options.address},\n    ]\n  }\n\n  setDefaultAccount(\n    account\n  ) {\n    this.yfi.options.from = account;\n    this.ycrv.options.from = account;\n    this.yam.options.from = account;\n    this.weth.options.from = account;\n  }\n\n  async callContractFunction(\n    method,\n    options\n  ) {\n    const { confirmations, confirmationType, autoGasMultiplier, ...txOptions } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log(\"estimating gas\");\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const { from, value } = options;\n          const to = method._parent._address;\n          error.transactionData = { from, value, data, to };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return { gasEstimate, g };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2,\n    };\n\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise(\n        (resolve, reject) => {\n          promi.on('error', (error) => {\n            if (hashOutcome === OUTCOMES.INITIAL) {\n              hashOutcome = OUTCOMES.REJECTED;\n              reject(error);\n              const anyPromi = promi ;\n              anyPromi.off();\n            }\n          });\n\n          promi.on('transactionHash', (txHash) => {\n            if (hashOutcome === OUTCOMES.INITIAL) {\n              hashOutcome = OUTCOMES.RESOLVED;\n              resolve(txHash);\n              if (t !== Types.ConfirmationType.Both) {\n                const anyPromi = promi ;\n                anyPromi.off();\n              }\n            }\n          });\n        },\n      );\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise(\n        (resolve, reject) => {\n          promi.on('error', (error) => {\n            if (\n              (t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED)\n              && confirmationOutcome === OUTCOMES.INITIAL\n            ) {\n              confirmationOutcome = OUTCOMES.REJECTED;\n              reject(error);\n              const anyPromi = promi ;\n              anyPromi.off();\n            }\n          });\n\n          const desiredConf = confirmations || this.defaultConfirmations;\n          if (desiredConf) {\n            promi.on('confirmation', (confNumber, receipt) => {\n              if (confNumber >= desiredConf) {\n                if (confirmationOutcome === OUTCOMES.INITIAL) {\n                  confirmationOutcome = OUTCOMES.RESOLVED;\n                  resolve(receipt);\n                  const anyPromi = promi ;\n                  anyPromi.off();\n                }\n              }\n            });\n          } else {\n            promi.on('receipt', (receipt) => {\n              confirmationOutcome = OUTCOMES.RESOLVED;\n              resolve(receipt);\n              const anyPromi = promi ;\n              anyPromi.off();\n            });\n          }\n        },\n      );\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n      if (this.notifier) {\n          this.notifier.hash(transactionHash)\n      }\n      return { transactionHash };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n    if (this.notifier) {\n        this.notifier.hash(transactionHash)\n    }\n    return {\n      transactionHash,\n      confirmation: confirmationPromise,\n    };\n  }\n\n  async callConstantContractFunction(\n    method,\n    options\n  ) {\n    const m2 = method;\n    const { blockNumber, ...txOptions } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n  setContractProvider(\n    contract,\n    contractJson,\n    provider,\n    networkId,\n  ){\n    contract.setProvider(provider);\n    try {\n      contract.options.address = contractJson.networks[networkId]\n        && contractJson.networks[networkId].address;\n    } catch (error) {\n      // console.log(error)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}