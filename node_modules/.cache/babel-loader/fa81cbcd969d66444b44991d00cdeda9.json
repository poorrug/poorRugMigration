{"ast":null,"code":"import { getCurrentPrice as gCP, getTargetPrice as gTP, getCirculatingSupply as gCS, getNextRebaseTimestamp as gNRT, getTotalSupply as gTS } from '../../yamUtils';\n\nconst getCurrentPrice = async yam => {\n  // FORBROCK: get current YAM price\n  return gCP(yam);\n};\n\nconst getTargetPrice = async yam => {\n  // FORBROCK: get target YAM price\n  return gTP(yam);\n};\n\nconst getCirculatingSupply = async yam => {\n  // FORBROCK: get circulating supply\n  return gCS(yam);\n};\n\nconst getNextRebaseTimestamp = async yam => {\n  // FORBROCK: get next rebase timestamp\n  const nextRebase = await gNRT(yam);\n  return nextRebase * 1000;\n};\n\nconst getTotalSupply = async yam => {\n  // FORBROCK: get total supply\n  return gTS(yam);\n};\n\nexport const getStats = async yam => {\n  const curPrice = await getCurrentPrice(yam);\n  const circSupply = ''; // await getCirculatingSupply(yam)\n\n  const nextRebase = await getNextRebaseTimestamp(yam);\n  const targetPrice = await getTargetPrice(yam);\n  const totalSupply = await getTotalSupply(yam);\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  };\n};","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/views/Home/utils.ts"],"names":["getCurrentPrice","gCP","getTargetPrice","gTP","getCirculatingSupply","gCS","getNextRebaseTimestamp","gNRT","getTotalSupply","gTS","yam","nextRebase","getStats","curPrice","circSupply","targetPrice","totalSupply"],"mappings":"AAEA,SACEA,eAAe,IAAIC,GADrB,EAEEC,cAAc,IAAIC,GAFpB,EAGEC,oBAAoB,IAAIC,GAH1B,EAIEC,sBAAsB,IAAIC,IAJ5B,EAKEC,cAAc,IAAIC,GALpB,QAMO,gBANP;;AAQA,MAAMT,eAAe,GAAG,MAAOU,GAAP,IAA4C;AAClE;AACA,SAAOT,GAAG,CAACS,GAAD,CAAV;AACD,CAHD;;AAKA,MAAMR,cAAc,GAAG,MAAOQ,GAAP,IAA4C;AACjE;AACA,SAAOP,GAAG,CAACO,GAAD,CAAV;AACD,CAHD;;AAKA,MAAMN,oBAAoB,GAAG,MAAOM,GAAP,IAA4C;AACvE;AACA,SAAOL,GAAG,CAACK,GAAD,CAAV;AACD,CAHD;;AAKA,MAAMJ,sBAAsB,GAAG,MAAOI,GAAP,IAA4C;AACzE;AACA,QAAMC,UAAU,GAAG,MAAMJ,IAAI,CAACG,GAAD,CAA7B;AACA,SAAOC,UAAU,GAAG,IAApB;AACD,CAJD;;AAMA,MAAMH,cAAc,GAAG,MAAOE,GAAP,IAA4C;AACjE;AACA,SAAOD,GAAG,CAACC,GAAD,CAAV;AACD,CAHD;;AAKA,OAAO,MAAME,QAAQ,GAAG,MAAOF,GAAP,IAA2B;AACjD,QAAMG,QAAQ,GAAG,MAAMb,eAAe,CAACU,GAAD,CAAtC;AACA,QAAMI,UAAU,GAAG,EAAnB,CAFiD,CAE3B;;AACtB,QAAMH,UAAU,GAAG,MAAML,sBAAsB,CAACI,GAAD,CAA/C;AACA,QAAMK,WAAW,GAAG,MAAMb,cAAc,CAACQ,GAAD,CAAxC;AACA,QAAMM,WAAW,GAAG,MAAMR,cAAc,CAACE,GAAD,CAAxC;AACA,SAAO;AACLI,IAAAA,UADK;AAELD,IAAAA,QAFK;AAGLF,IAAAA,UAHK;AAILI,IAAAA,WAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CAbM","sourcesContent":["import { Yam } from '../../yam'\n\nimport {\n  getCurrentPrice as gCP,\n  getTargetPrice as gTP,\n  getCirculatingSupply as gCS,\n  getNextRebaseTimestamp as gNRT,\n  getTotalSupply as gTS,\n} from '../../yamUtils'\n\nconst getCurrentPrice = async (yam: typeof Yam): Promise<number> => {\n  // FORBROCK: get current YAM price\n  return gCP(yam)\n}\n\nconst getTargetPrice = async (yam: typeof Yam): Promise<number> => {\n  // FORBROCK: get target YAM price\n  return gTP(yam)\n}\n\nconst getCirculatingSupply = async (yam: typeof Yam): Promise<string> => {\n  // FORBROCK: get circulating supply\n  return gCS(yam)\n}\n\nconst getNextRebaseTimestamp = async (yam: typeof Yam): Promise<number> => {\n  // FORBROCK: get next rebase timestamp\n  const nextRebase = await gNRT(yam) as number\n  return nextRebase * 1000\n}\n\nconst getTotalSupply = async (yam: typeof Yam): Promise<string> => {\n  // FORBROCK: get total supply\n  return gTS(yam)\n}\n\nexport const getStats = async (yam: typeof Yam) => {\n  const curPrice = await getCurrentPrice(yam)\n  const circSupply = '' // await getCirculatingSupply(yam)\n  const nextRebase = await getNextRebaseTimestamp(yam)\n  const targetPrice = await getTargetPrice(yam)\n  const totalSupply = await getTotalSupply(yam)\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  }\n}\n"]},"metadata":{},"sourceType":"module"}