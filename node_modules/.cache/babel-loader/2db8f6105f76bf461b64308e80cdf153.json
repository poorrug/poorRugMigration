{"ast":null,"code":"import { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getPoolStartTime = async poolContract => {\n  return await poolContract.methods.starttime().call();\n};\nexport const stake = async (poolContract, amount, account, tokenName) => {\n  let now = new Date().getTime() / 1000;\n  const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.stake(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n      from: account,\n      gas\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const unstake = async (poolContract, amount, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const harvest = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.getReward().send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const redeem = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.exit().send({\n      from: account,\n      gas: 400000\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods.approve(poolContract.options.address, ethers.constants.MaxUint256).send({\n    from: account,\n    gas: 80000\n  });\n};\nexport const getPoolContracts = async yam => {\n  const pools = Object.keys(yam.contracts).filter(c => c.indexOf('_pool') !== -1).reduce((acc, cur) => {\n    const newAcc = { ...acc\n    };\n    newAcc[cur] = yam.contracts[cur];\n    return newAcc;\n  }, {});\n  return pools;\n};\nexport const getEarned = async (yam, pool, account) => {\n  const scalingFactor = new BigNumber((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n  const earned = new BigNumber((await pool.methods.earned(account).call()));\n  return earned.multipliedBy(scalingFactor.dividedBy(new BigNumber(10).pow(18)));\n};\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN((await pool.methods.balanceOf(account).call()));\n};\nexport const getCurrentPrice = async yam => {\n  // FORBROCK: get current YAM price\n  return yam.toBigN((await yam.contracts.rebaser.methods.getCurrentTWAP().call()));\n};\nexport const getTargetPrice = async yam => {\n  return yam.toBigN(1).toFixed(2);\n};\nexport const getCirculatingSupply = async yam => {\n  let now = await yam.web3.eth.getBlock('latest');\n  let scalingFactor = yam.toBigN((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n  let starttime = yam.toBigN((await yam.contracts.eth_pool.methods.starttime().call())).toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n\n  if (timePassed < 0) {\n    return 0;\n  }\n\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n\n  let starttimePool2 = yam.toBigN((await yam.contracts.ycrv_pool.methods.starttime().call())).toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).div(10 ** 36).toFixed(2);\n  return circulating;\n};\nexport const getNextRebaseTimestamp = async yam => {\n  try {\n    let now = await yam.web3.eth.getBlock('latest').then(res => res.timestamp);\n    let interval = 43200; // 12 hours\n\n    let offset = 28800; // 8am/8pm utc\n\n    let secondsToRebase = 0;\n\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\n      if (now % interval > offset) {\n        secondsToRebase = interval - now % interval + offset;\n      } else {\n        secondsToRebase = offset - now % interval;\n      }\n    } else {\n      let twap_init = yam.toBigN((await yam.contracts.rebaser.methods.timeOfTWAPInit().call())).toNumber();\n\n      if (twap_init > 0) {\n        let delay = yam.toBigN((await yam.contracts.rebaser.methods.rebaseDelay().call())).toNumber();\n        let endTime = twap_init + delay;\n\n        if (endTime % interval > offset) {\n          secondsToRebase = interval - endTime % interval + offset;\n        } else {\n          secondsToRebase = offset - endTime % interval;\n        }\n\n        return endTime + secondsToRebase;\n      } else {\n        return now + 13 * 60 * 60; // just know that its greater than 12 hours away\n      }\n    }\n\n    return secondsToRebase;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTotalSupply = async yam => {\n  return await yam.contracts.yam.methods.totalSupply().call();\n};\nexport const getStats = async yam => {\n  const curPrice = await getCurrentPrice(yam);\n  const circSupply = await getCirculatingSupply(yam);\n  const nextRebase = await getNextRebaseTimestamp(yam);\n  const targetPrice = await getTargetPrice(yam);\n  const totalSupply = await getTotalSupply(yam);\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  };\n};\nexport const vote = async (yam, account) => {\n  return yam.contracts.gov.methods.castVote(0, true).send({\n    from: account\n  });\n};\nexport const delegate = async (yam, account) => {\n  return yam.contracts.yam.methods.delegate(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").send({\n    from: account,\n    gas: 320000\n  });\n};\nexport const didDelegate = async (yam, account) => {\n  return (await yam.contracts.yam.methods.delegates(account).call()) === '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84';\n};\nexport const getVotes = async yam => {\n  const votesRaw = new BigNumber((await yam.contracts.yam.methods.getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").call())).div(10 ** 24);\n  return votesRaw;\n};\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber((await yam.contracts.yam.methods.balanceOfUnderlying(account).call())).div(10 ** 24);\n};\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({\n    from: account,\n    gas: 320000\n  });\n};\nexport const getMigrationEndTime = async yam => {\n  return yam.toBigN((await yam.contracts.yamV2migration.methods.startTime().call())).plus(yam.toBigN(86400 * 3)).toNumber();\n};","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/yamUtils/index.js"],"names":["ethers","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getPoolStartTime","poolContract","methods","starttime","call","stake","amount","account","tokenName","now","Date","getTime","gas","toUpperCase","times","pow","toString","send","from","on","tx","console","log","transactionHash","alert","unstake","withdraw","harvest","getReward","redeem","exit","approve","tokenContract","options","address","constants","MaxUint256","getPoolContracts","yam","pools","Object","keys","contracts","filter","c","indexOf","reduce","acc","cur","newAcc","getEarned","pool","scalingFactor","yamsScalingFactor","earned","multipliedBy","dividedBy","getStaked","toBigN","balanceOf","getCurrentPrice","rebaser","getCurrentTWAP","getTargetPrice","toFixed","getCirculatingSupply","web3","eth","getBlock","eth_pool","toNumber","timePassed","yamsDistributed","starttimePool2","ycrv_pool","pool2Yams","circulating","plus","div","getNextRebaseTimestamp","then","res","timestamp","interval","offset","secondsToRebase","rebasingActive","twap_init","timeOfTWAPInit","delay","rebaseDelay","endTime","e","getTotalSupply","totalSupply","getStats","curPrice","circSupply","nextRebase","targetPrice","vote","gov","castVote","delegate","didDelegate","delegates","getVotes","votesRaw","getCurrentVotes","getDelegatedBalance","balanceOfUnderlying","migrate","yamV2migration","getMigrationEndTime","startTime"],"mappings":"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","sourcesContent":["import {ethers} from 'ethers'\n\nimport BigNumber from 'bignumber.js'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000,\n  }\n};\n\nexport const getPoolStartTime = async (poolContract) => {\n  return await poolContract.methods.starttime().call()\n}\n\nexport const stake = async (poolContract, amount, account, tokenName) => {\n  let now = new Date().getTime() / 1000;\n  const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .stake((new BigNumber(amount).times(new BigNumber(10).pow(18))).toString())\n      .send({ from: account, gas })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const unstake = async (poolContract, amount, account) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .withdraw((new BigNumber(amount).times(new BigNumber(10).pow(18))).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const harvest = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .getReward()\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const redeem = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .exit()\n      .send({ from: account, gas: 400000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods\n    .approve(poolContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account, gas: 80000 })\n}\n\nexport const getPoolContracts = async (yam) => {\n  const pools = Object.keys(yam.contracts)\n    .filter(c => c.indexOf('_pool') !== -1)\n    .reduce((acc, cur) => {\n      const newAcc = { ...acc }\n      newAcc[cur] = yam.contracts[cur]\n      return newAcc\n    }, {})\n  return pools\n}\n\nexport const getEarned = async (yam, pool, account) => {\n  const scalingFactor = new BigNumber(await yam.contracts.yam.methods.yamsScalingFactor().call())\n  const earned = new BigNumber(await pool.methods.earned(account).call())\n  return earned.multipliedBy(scalingFactor.dividedBy(new BigNumber(10).pow(18)))\n}\n\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.balanceOf(account).call())\n}\n\nexport const getCurrentPrice = async (yam) => {\n  // FORBROCK: get current YAM price\n  return yam.toBigN(await yam.contracts.rebaser.methods.getCurrentTWAP().call())\n}\n\nexport const getTargetPrice = async (yam) => {\n  return yam.toBigN(1).toFixed(2);\n}\n\nexport const getCirculatingSupply = async (yam) => {\n  let now = await yam.web3.eth.getBlock('latest');\n  let scalingFactor = yam.toBigN(await yam.contracts.yam.methods.yamsScalingFactor().call());\n  let starttime = yam.toBigN(await yam.contracts.eth_pool.methods.starttime().call()).toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n  if (timePassed < 0) {\n    return 0;\n  }\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n  let starttimePool2 = yam.toBigN(await yam.contracts.ycrv_pool.methods.starttime().call()).toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).div(10**36).toFixed(2)\n  return circulating\n}\n\nexport const getNextRebaseTimestamp = async (yam) => {\n  try {\n    let now = await yam.web3.eth.getBlock('latest').then(res => res.timestamp);\n    let interval = 43200; // 12 hours\n    let offset = 28800; // 8am/8pm utc\n    let secondsToRebase = 0;\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\n      if (now % interval > offset) {\n          secondsToRebase = (interval - (now % interval)) + offset;\n       } else {\n          secondsToRebase = offset - (now % interval);\n      }\n    } else {\n      let twap_init = yam.toBigN(await yam.contracts.rebaser.methods.timeOfTWAPInit().call()).toNumber();\n      if (twap_init > 0) {\n        let delay = yam.toBigN(await yam.contracts.rebaser.methods.rebaseDelay().call()).toNumber();\n        let endTime = twap_init + delay;\n        if (endTime % interval > offset) {\n            secondsToRebase = (interval - (endTime % interval)) + offset;\n         } else {\n            secondsToRebase = offset - (endTime % interval);\n        }\n        return endTime + secondsToRebase;\n      } else {\n        return now + 13*60*60; // just know that its greater than 12 hours away\n      }\n    }\n    return secondsToRebase\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const getTotalSupply = async (yam) => {\n  return await yam.contracts.yam.methods.totalSupply().call();\n}\n\nexport const getStats = async (yam) => {\n  const curPrice = await getCurrentPrice(yam)\n  const circSupply = await getCirculatingSupply(yam)\n  const nextRebase = await getNextRebaseTimestamp(yam)\n  const targetPrice = await getTargetPrice(yam)\n  const totalSupply = await getTotalSupply(yam)\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  }\n}\n\nexport const vote = async (yam, account) => {\n  return yam.contracts.gov.methods.castVote(0, true).send({ from: account })\n}\n\nexport const delegate = async (yam, account) => {\n  return yam.contracts.yam.methods.delegate(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").send({from: account, gas: 320000 })\n}\n\nexport const didDelegate = async (yam, account) => {\n  return await yam.contracts.yam.methods.delegates(account).call() === '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84'\n}\n\nexport const getVotes = async (yam) => {\n  const votesRaw = new BigNumber(await yam.contracts.yam.methods.getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").call()).div(10**24)\n  return votesRaw\n}\n\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber(await yam.contracts.yam.methods.balanceOfUnderlying(account).call()).div(10**24)\n}\n\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({ from: account, gas: 320000 })\n}\n\nexport const getMigrationEndTime = async (yam) => {\n  return yam.toBigN(await yam.contracts.yamV2migration.methods.startTime().call()).plus(yam.toBigN(86400*3)).toNumber()\n}"]},"metadata":{},"sourceType":"module"}