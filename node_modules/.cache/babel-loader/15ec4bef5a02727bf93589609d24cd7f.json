{"ast":null,"code":"var _jsxFileName = \"/Users/sminem/Documents/GitHub/poorRugMigration/src/contexts/YamProvider/YamProvider.tsx\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Yam } from '../../yam';\nexport const Context = createContext({\n  yam: undefined\n});\n\nconst YamProvider = ({\n  children\n}) => {\n  const {\n    ethereum\n  } = useWallet();\n  const [yam, setYam] = useState();\n  useEffect(() => {\n    if (ethereum) {\n      const yamLib = new Yam(ethereum, \"1\", false, {\n        defaultAccount: \"\",\n        defaultConfirmations: 1,\n        autoGasMultiplier: 1.5,\n        testing: false,\n        defaultGas: \"6000000\",\n        defaultGasPrice: \"1000000000000\",\n        accounts: [],\n        ethereumNodeTimeout: 10000\n      });\n      setYam(yamLib);\n      window.yamsauce = yamLib;\n    }\n  }, [ethereum]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      yam\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default YamProvider;","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/contexts/YamProvider/YamProvider.tsx"],"names":["React","createContext","useEffect","useState","useWallet","Yam","Context","yam","undefined","YamProvider","children","ethereum","setYam","yamLib","defaultAccount","defaultConfirmations","autoGasMultiplier","testing","defaultGas","defaultGasPrice","accounts","ethereumNodeTimeout","window","yamsauce"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,GAAT,QAAoB,WAApB;AAMA,OAAO,MAAMC,OAAO,GAAGL,aAAa,CAAa;AAC/CM,EAAAA,GAAG,EAAEC;AAD0C,CAAb,CAA7B;;AAUP,MAAMC,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAeP,SAAS,EAA9B;AACA,QAAM,CAACG,GAAD,EAAMK,MAAN,IAAgBT,QAAQ,EAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAJ,EAAc;AACZ,YAAME,MAAM,GAAG,IAAIR,GAAJ,CACbM,QADa,EAEb,GAFa,EAGb,KAHa,EAGN;AACLG,QAAAA,cAAc,EAAE,EADX;AAELC,QAAAA,oBAAoB,EAAE,CAFjB;AAGLC,QAAAA,iBAAiB,EAAE,GAHd;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,UAAU,EAAE,SALP;AAMLC,QAAAA,eAAe,EAAE,eANZ;AAOLC,QAAAA,QAAQ,EAAE,EAPL;AAQLC,QAAAA,mBAAmB,EAAE;AARhB,OAHM,CAAf;AAcAT,MAAAA,MAAM,CAACC,MAAD,CAAN;AACAS,MAAAA,MAAM,CAACC,QAAP,GAAkBV,MAAlB;AACD;AACF,GAnBQ,EAmBN,CAACF,QAAD,CAnBM,CAAT;AAqBA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CADF;AAKD,CA9BD;;AAgCA,eAAeD,WAAf","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\n\nimport { useWallet } from 'use-wallet'\n\nimport { Yam } from '../../yam'\n\nexport interface YamContext {\n  yam?: typeof Yam\n}\n\nexport const Context = createContext<YamContext>({\n  yam: undefined,\n})\n\ndeclare global {\n  interface Window {\n    yamsauce: any\n  }\n}\n\nconst YamProvider: React.FC = ({ children }) => {\n  const { ethereum } = useWallet()\n  const [yam, setYam] = useState<any>()\n\n  useEffect(() => {\n    if (ethereum) {\n      const yamLib = new Yam(\n        ethereum,\n        \"1\",\n        false, {\n          defaultAccount: \"\",\n          defaultConfirmations: 1,\n          autoGasMultiplier: 1.5,\n          testing: false,\n          defaultGas: \"6000000\",\n          defaultGasPrice: \"1000000000000\",\n          accounts: [],\n          ethereumNodeTimeout: 10000\n        }\n      )\n      setYam(yamLib)\n      window.yamsauce = yamLib\n    }\n  }, [ethereum])\n\n  return (\n    <Context.Provider value={{ yam }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default YamProvider\n"]},"metadata":{},"sourceType":"module"}