{"ast":null,"code":"var _jsxFileName = \"/Users/sminem/Documents/GitHub/poorRugMigration/src/contexts/Farms/Farms.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { yam as yamAddress } from '../../constants/tokenAddresses';\nimport useYam from '../../hooks/useYam';\nimport { getPoolContracts } from '../../yamUtils';\nimport Context from './context';\nconst NAME_FOR_POOL = {\n  yfi_pool: 'YFI Farm',\n  eth_pool: 'Weth Homestead',\n  ampl_pool: 'Ample Soils',\n  ycrv_pool: 'Eternal Lands',\n  comp_pool: 'Compounding Hills',\n  link_pool: 'Marine Gardens',\n  lend_pool: 'Aave Agriculture',\n  snx_pool: 'Spartan Grounds',\n  mkr_pool: 'Maker Range'\n};\nconst ICON_FOR_POOL = {\n  yfi_pool: '🐋',\n  eth_pool: '🌎',\n  ampl_pool: '🌷',\n  comp_pool: '💸',\n  link_pool: '🔗',\n  lend_pool: '🏕️',\n  snx_pool: '⚔️',\n  mkr_pool: '🐮',\n  ycrv_pool: '🌈'\n};\nconst SORT_FOR_POOL = {\n  yfi_pool: 0,\n  eth_pool: 1,\n  ampl_pool: 2,\n  comp_pool: 3,\n  ycrv_pool: 4,\n  link_pool: 5,\n  lend_pool: 6,\n  snx_pool: 7,\n  mkr_pool: 8\n};\n\nconst Farms = ({\n  children\n}) => {\n  const [farms, setFarms] = useState([]);\n  const yam = useYam();\n  const fetchPools = useCallback(async () => {\n    const pools = await getPoolContracts(yam);\n    const farmsArr = [];\n    const poolKeys = Object.keys(pools);\n\n    for (let i = 0; i < poolKeys.length; i++) {\n      const poolKey = poolKeys[i];\n      const pool = pools[poolKey];\n      let tokenKey = poolKey.replace('_pool', '');\n\n      if (tokenKey === 'eth') {\n        tokenKey = 'weth';\n      } else if (tokenKey === 'ampl') {\n        tokenKey = 'ampl_eth_uni_lp';\n      } else if (tokenKey === 'ycrv') {\n        tokenKey = 'ycrv_yam_uni_lp';\n      }\n\n      const method = pool.methods[tokenKey];\n\n      try {\n        let tokenAddress = '';\n\n        if (method) {\n          tokenAddress = await method().call();\n        } else if (tokenKey === 'ycrv_yam_uni_lp') {\n          tokenAddress = '0xdf5e0e81dff6faf3a7e52ba697820c5e32d806a8';\n        }\n\n        farmsArr.push({\n          contract: pool,\n          name: NAME_FOR_POOL[poolKey],\n          depositToken: tokenKey,\n          depositTokenAddress: tokenAddress,\n          earnToken: 'yam',\n          earnTokenAddress: yamAddress,\n          icon: ICON_FOR_POOL[poolKey],\n          id: tokenKey,\n          sort: SORT_FOR_POOL[poolKey]\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    farmsArr.sort((a, b) => a.sort < b.sort ? 1 : -1);\n    setFarms(farmsArr);\n  }, [yam, setFarms]);\n  useEffect(() => {\n    if (yam) {\n      fetchPools();\n    }\n  }, [yam, fetchPools]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      farms\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Farms;","map":{"version":3,"sources":["/Users/sminem/Documents/GitHub/poorRugMigration/src/contexts/Farms/Farms.tsx"],"names":["React","useCallback","useEffect","useState","yam","yamAddress","useYam","getPoolContracts","Context","NAME_FOR_POOL","yfi_pool","eth_pool","ampl_pool","ycrv_pool","comp_pool","link_pool","lend_pool","snx_pool","mkr_pool","ICON_FOR_POOL","SORT_FOR_POOL","Farms","children","farms","setFarms","fetchPools","pools","farmsArr","poolKeys","Object","keys","i","length","poolKey","pool","tokenKey","replace","method","methods","tokenAddress","call","push","contract","name","depositToken","depositTokenAddress","earnToken","earnTokenAddress","icon","id","sort","e","console","log","a","b"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Contract } from 'web3-eth-contract'\n\nimport { yam as yamAddress } from '../../constants/tokenAddresses'\nimport useYam from '../../hooks/useYam'\nimport { getPoolContracts } from '../../yamUtils'\n\nimport Context from './context'\nimport { Farm } from './types'\n\nconst NAME_FOR_POOL: { [key: string]: string } = {\n  yfi_pool: 'YFI Farm',\n  eth_pool: 'Weth Homestead',\n  ampl_pool: 'Ample Soils',\n  ycrv_pool: 'Eternal Lands',\n  comp_pool: 'Compounding Hills',\n  link_pool: 'Marine Gardens',\n  lend_pool: 'Aave Agriculture',\n  snx_pool: 'Spartan Grounds',\n  mkr_pool: 'Maker Range',\n}\n\nconst ICON_FOR_POOL: { [key: string]: string } = {\n  yfi_pool: '🐋',\n  eth_pool: '🌎',\n  ampl_pool: '🌷',\n  comp_pool: '💸',\n  link_pool: '🔗',\n  lend_pool: '🏕️',\n  snx_pool: '⚔️',\n  mkr_pool: '🐮',\n  ycrv_pool: '🌈',\n}\n\nconst SORT_FOR_POOL: { [key: string]: number } = {\n  yfi_pool: 0,\n  eth_pool: 1,\n  ampl_pool: 2,\n  comp_pool: 3,\n  ycrv_pool: 4,\n  link_pool: 5,\n  lend_pool: 6,\n  snx_pool: 7,\n  mkr_pool: 8,\n}\n\nconst Farms: React.FC = ({ children }) => {\n\n  const [farms, setFarms] = useState<Farm[]>([])\n  const yam = useYam()\n\n  const fetchPools = useCallback(async () => {\n    const pools: { [key: string]: Contract} = await getPoolContracts(yam)\n\n    const farmsArr: Farm[] = []\n    const poolKeys = Object.keys(pools)\n\n    for (let i = 0; i < poolKeys.length; i++) {\n      const poolKey = poolKeys[i]\n      const pool = pools[poolKey]\n      let tokenKey = poolKey.replace('_pool', '')\n      if (tokenKey === 'eth') {\n        tokenKey = 'weth'\n      } else if (tokenKey === 'ampl') {\n        tokenKey = 'ampl_eth_uni_lp'\n      } else if (tokenKey === 'ycrv') {\n        tokenKey = 'ycrv_yam_uni_lp'\n      }\n\n      const method = pool.methods[tokenKey]\n      try {\n        let tokenAddress = ''\n        if (method) {\n          tokenAddress = await method().call()\n        } else if (tokenKey === 'ycrv_yam_uni_lp') {\n          tokenAddress = '0xdf5e0e81dff6faf3a7e52ba697820c5e32d806a8'\n        }\n        farmsArr.push({\n          contract: pool,\n          name: NAME_FOR_POOL[poolKey],\n          depositToken: tokenKey,\n          depositTokenAddress: tokenAddress,\n          earnToken: 'yam',\n          earnTokenAddress: yamAddress,\n          icon: ICON_FOR_POOL[poolKey],\n          id: tokenKey,\n          sort: SORT_FOR_POOL[poolKey]\n        })\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    farmsArr.sort((a, b) => a.sort < b.sort ? 1 : -1)\n    setFarms(farmsArr)\n  }, [yam, setFarms])\n\n  useEffect(() => {\n    if (yam) {\n      fetchPools()\n    }\n  }, [yam, fetchPools])\n  \n  return (\n    <Context.Provider value={{ farms }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Farms"]},"metadata":{},"sourceType":"module"}