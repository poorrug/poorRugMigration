var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Authereum from './AuthereumSDK';
// NOTE: https://github.com/blocknative/onboard/issues/214#issuecomment-629880691
const ethers = require('ethers');
// NOTE: https://stackoverflow.com/a/61922437/1439168
export default class AuthereumSigner extends ethers['Signer'] {
    constructor(config) {
        super();
        this.config = config || {};
        this.authereum = new Authereum(this.config);
        this.provider = this.authereum.getProvider();
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.getAccountAddress();
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sign(message);
        });
    }
    sign(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sign(transaction);
        });
    }
    sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sendTransaction(transaction);
        });
    }
    sendTransactionBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sendTransactionBatch(transactions);
        });
    }
    estimateGasBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.estimateGasBatch(transactions);
        });
    }
}
